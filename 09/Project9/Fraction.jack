// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Fraction/Fraction.jack

/** Represents the Fraction type and related operations. */
class Fraction {
    field int numerator, denominator;  // field = property = member variable.

    /** Constructs a (reduced) fraction from the given numerator and denominator. */
    constructor Fraction new(int x, int y) {
      let numerator = x;
      let denominator = y;
      //do reduce();   // reduces the fraction
      return this;   // a constructor is expected to return a reference to the new object
    }

    constructor Fraction copyNew(Fraction other){
      let numerator = other.getNumerator();
      let denominator = other.getDenominator();
      return this;
    }

    // Reduces this fraction.
    method void reduce() {
      var int g;
      let g = Fraction.gcd(numerator, denominator);
      if (g > 1) {
         let numerator = numerator / g;
         let denominator = denominator / g;
      }
      return;
    }


    //Reduces this fraction to avoid overflow. Introduces imprecision
    method void lossyReduce(int limit) {
      while(numerator > limit){
          if(denominator / 2 = 0){
            return;
          }
          let numerator = numerator / 2;
          let denominator = denominator / 2;
      }
      while(numerator < (limit * -1)){
          if(denominator / 2 = 0){
            return;
          }
          let numerator = numerator / 2;
          let denominator = denominator / 2;
      }
      // while(denominator > limit){
      //     if(denominator / 2 = 0){
      //       return;
      //     }
      //     let numerator = numerator / 2;
      //     let denominator = denominator / 2;
      // }
      return;
    }

    /** Accessors. */
    method int getNumerator() { return numerator; }
    method int getDenominator() { return denominator; }

    /** Returns the sum of this fraction and the other one. */
    method Fraction plus(Fraction other) {
    var Fraction toReturn;
      var int num, denom;
      do reduce();
      do other.reduce();
      let num = (numerator * other.getDenominator()) + (other.getNumerator() * denominator);
      let denom = denominator * other.getDenominator();
      //let sum = (numerator * other.getDenominator()) + (other.getNumerator() * denominator);
      let toReturn = Fraction.new(num, denom);
      return toReturn;
    }

    //Adds an integer to the fraction
    method Fraction plusInt(int other){
      var Fraction intToFrac;
      let intToFrac = Fraction.new(other, 1);
      return plus(intToFrac);
    }

    //Comparison Operators

    //Returns true if greater than or equal to
    method boolean isGTE(Fraction other){
      var boolean toReturn;
      var int thisProduct, otherProduct;
      let thisProduct = numerator * other.getDenominator();
      let otherProduct = other.getNumerator() * denominator;
      if(thisProduct > otherProduct){
        return true;
      }
      return false;
    }

    // More fraction-related methods (minus, times, div, etc.) can be added here.

    method Fraction mult(Fraction other){
    var Fraction toReturn;
    var int newNum;
    var int newDenom;
    // do lossyReduce(2);
    // do other.lossyReduce(2);
    let newNum = numerator * other.getNumerator();
    let newDenom = denominator * other.getDenominator();
    let toReturn = Fraction.new(newNum, newDenom);
    //do toReturn.lossyReduce(2);
    return toReturn;
    }

    method Fraction multInt(int other){
    return Fraction.new(numerator * other, denominator);
    }

    method void multIntThis(int other){
    let numerator = numerator * other;
    return;
    }

    method Fraction div(Fraction other){
    var Fraction multInv, toReturn;
    let multInv = Fraction.new(other.getDenominator(), other.getNumerator());
    let toReturn = mult(multInv);
    return toReturn;
    }

    method int floor(){
    return numerator / denominator;
    }

    //Gets the additive inverse of this fraction
    method Fraction addInv(){
    var Fraction negOne;
    let negOne = Fraction.new(-1, 1);
    return mult(negOne);
    }

    //Approximations of Trig Functions
    method Fraction sinOfThis(){
    var Fraction invTwoPi, oneHalf, d, toReturn, intermediate;
    var int interInt;
    let invTwoPi = Fraction.new(50, 314);
    let oneHalf = Fraction.new(1, 2);
    let d = mult(invTwoPi);
    let interInt = d.floor();
    let interInt = interInt * -1;
    let intermediate = Fraction.new(interInt, 1);
    let d = d.plus(intermediate);
    if(d.isGTE(oneHalf)){
        do d.lossyReduce(181);
        //do d.print();
        let toReturn = d.mult(d);
        let toReturn = toReturn.multInt(16);
        let intermediate = d.multInt(-24);
        let toReturn = toReturn.plus(intermediate);
        let intermediate = Fraction.new(8,1);
        let toReturn = toReturn.plus(intermediate);
    }
    else {
        do d.lossyReduce(181);
        let toReturn = d.mult(d);
        let toReturn = toReturn.multInt(-16);
        let intermediate = d.multInt(8);
        let toReturn = toReturn.plus(intermediate);
    }
    //do toReturn.reduce();
    return toReturn;
    }

    method Fraction cosOfThis(){
    var Fraction intermediate, toReturn;
    let intermediate = Fraction.new(314, 200);
    // do intermediate.print();
    let intermediate = plus(intermediate);
    // do print();
    // do intermediate.print();
    let toReturn = intermediate.sinOfThis();
    return toReturn;
    }

    /** Disposes this fraction. */
    method void dispose() {
      let numerator = 1;
      let denominator = 1;
      do Memory.deAlloc(this);  // uses an OS routine to recycle the memory held by the object
      return;
    }

    /** Prints this fraction in the format x/y. */
    method void print() {
      do Output.printInt(numerator);
      do Output.printString("/");
      do Output.printInt(denominator);
      //do Output.println();
      return;
    }

      // Computes the greatest common divisor of the given integers.
    function int gcd(int a, int b) {
      var int r;
      while (~(b = 0)) {             // applies Euclid's algorithm
         let r = a - (b * (a / b));  // r = remainder of the integer division a/b
         let a = b; let b = r;
      }
      return a;
    }
}
