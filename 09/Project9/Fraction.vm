function Fraction.new 0
push constant 2
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push pointer 0
return
function Fraction.copyNew 0
push constant 2
call Memory.alloc 1
pop pointer 0
push argument 0
call Fraction.getNumerator 1
pop this 0
push argument 0
call Fraction.getDenominator 1
pop this 1
push pointer 0
return
function Fraction.reduce 1
push argument 0
pop pointer 0
push this 0
push this 1
call Fraction.gcd 2
pop local 0
push local 0
push constant 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 0
push local 0
call Math.divide 2
pop this 0
push this 1
push local 0
call Math.divide 2
pop this 1
label IF_FALSE0
push constant 0
return
function Fraction.lossyReduce 0
push argument 0
pop pointer 0
label WHILE_EXP0
push this 0
push argument 1
gt
not
if-goto WHILE_END0
push this 1
push constant 2
call Math.divide 2
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push this 0
push constant 2
call Math.divide 2
pop this 0
push this 1
push constant 2
call Math.divide 2
pop this 1
goto WHILE_EXP0
label WHILE_END0
label WHILE_EXP1
push this 0
push argument 1
push constant 1
neg
call Math.multiply 2
lt
not
if-goto WHILE_END1
push this 1
push constant 2
call Math.divide 2
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push this 0
push constant 2
call Math.divide 2
pop this 0
push this 1
push constant 2
call Math.divide 2
pop this 1
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
function Fraction.getNumerator 0
push argument 0
pop pointer 0
push this 0
return
function Fraction.getDenominator 0
push argument 0
pop pointer 0
push this 1
return
function Fraction.plus 2
push argument 0
pop pointer 0
push this 0
push argument 1
call Fraction.getDenominator 1
call Math.multiply 2
push argument 1
call Fraction.getNumerator 1
push this 1
call Math.multiply 2
add
pop local 1
push local 1
push this 1
push argument 1
call Fraction.getDenominator 1
call Math.multiply 2
call Fraction.new 2
pop local 0
push local 0
return
function Fraction.plusInt 1
push argument 0
pop pointer 0
push argument 1
push constant 1
call Fraction.new 2
pop local 0
push pointer 0
push local 0
call Fraction.plus 2
return
function Fraction.bigPlus 1
push argument 0
pop pointer 0
push this 0
push constant 2
call Math.divide 2
push this 1
push constant 2
call Math.divide 2
call Fraction.new 2
pop local 0
push local 0
push argument 1
call Fraction.plus 2
return
function Fraction.isGTE 3
push argument 0
pop pointer 0
push this 0
push argument 1
call Fraction.getDenominator 1
call Math.multiply 2
pop local 1
push argument 1
call Fraction.getNumerator 1
push this 1
call Math.multiply 2
pop local 2
push local 1
push local 2
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push constant 0
return
function Fraction.mult 3
push argument 0
pop pointer 0
push this 0
push argument 1
call Fraction.getNumerator 1
call Math.multiply 2
pop local 1
push this 1
push argument 1
call Fraction.getDenominator 1
call Math.multiply 2
pop local 2
push local 1
push local 2
call Fraction.new 2
pop local 0
push local 0
return
function Fraction.multInt 2
push argument 0
pop pointer 0
push this 0
push argument 1
call Math.multiply 2
pop local 0
push local 0
push this 1
call Fraction.new 2
return
function Fraction.multIntThis 0
push argument 0
pop pointer 0
push this 0
push argument 1
call Math.multiply 2
pop this 0
push constant 0
return
function Fraction.div 2
push argument 0
pop pointer 0
push argument 1
call Fraction.getDenominator 1
push argument 1
call Fraction.getNumerator 1
call Fraction.new 2
pop local 0
push pointer 0
push local 0
call Fraction.mult 2
pop local 1
push local 1
return
function Fraction.floor 1
push argument 0
pop pointer 0
push this 0
push this 1
call Math.divide 2
pop local 0
push local 0
return
function Fraction.addInv 1
push argument 0
pop pointer 0
push constant 1
neg
push constant 1
call Fraction.new 2
pop local 0
push pointer 0
push local 0
call Fraction.mult 2
return
function Fraction.sinOfThis 6
push argument 0
pop pointer 0
push constant 50
push constant 314
call Fraction.new 2
pop local 0
push constant 1
push constant 2
call Fraction.new 2
pop local 1
push pointer 0
push local 0
call Fraction.mult 2
pop local 2
push local 2
call Fraction.floor 1
pop local 5
push local 5
push constant 1
neg
call Math.multiply 2
pop local 5
push local 5
push constant 1
call Fraction.new 2
pop local 4
push local 2
push local 4
call Fraction.plus 2
pop local 2
push local 2
push local 1
call Fraction.isGTE 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push constant 181
call Fraction.lossyReduce 2
pop temp 0
push local 2
push local 2
call Fraction.mult 2
pop local 3
push local 3
push constant 16
call Fraction.multInt 2
pop local 3
push local 2
push constant 24
neg
call Fraction.multInt 2
pop local 4
push local 3
push local 4
call Fraction.plus 2
pop local 3
push constant 8
push constant 1
call Fraction.new 2
pop local 4
push local 3
push local 4
call Fraction.plus 2
pop local 3
goto IF_END0
label IF_FALSE0
push local 2
push constant 181
call Fraction.lossyReduce 2
pop temp 0
push local 2
push local 2
call Fraction.mult 2
pop local 3
push local 3
push constant 16
neg
call Fraction.multInt 2
pop local 3
push local 2
push constant 8
call Fraction.multInt 2
pop local 4
push local 3
push local 4
call Fraction.plus 2
pop local 3
label IF_END0
push local 3
return
function Fraction.cosOfThis 2
push argument 0
pop pointer 0
push constant 314
push constant 200
call Fraction.new 2
pop local 0
push pointer 0
push local 0
call Fraction.plus 2
pop local 0
push local 0
call Fraction.sinOfThis 1
pop local 1
push local 1
return
function Fraction.dispose 0
push argument 0
pop pointer 0
push constant 1
pop this 0
push constant 1
pop this 1
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Fraction.print 0
push argument 0
pop pointer 0
push this 0
call Output.printInt 1
pop temp 0
push constant 1
call String.new 1
push constant 47
call String.appendChar 2
call Output.printString 1
pop temp 0
push this 1
call Output.printInt 1
pop temp 0
push constant 0
return
function Fraction.gcd 1
label WHILE_EXP0
push argument 1
push constant 0
eq
not
not
if-goto WHILE_END0
push argument 0
push argument 1
push argument 0
push argument 1
call Math.divide 2
call Math.multiply 2
sub
pop local 0
push argument 1
pop argument 0
push local 0
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push argument 0
return
