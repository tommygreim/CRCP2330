//		Tommy Greim
//		Nand2Tetris: Project 9
//		A Recreation of the ship from the game ASTEROIDS.

class Main {
   function void main() {
  		var int drawCounter, currentKey;
  		var boolean showShip;
  		var Triangle mainTri, leftTri, rightTri;
  		do Trig.populateSine();

		let mainTri = Triangle.new(512 / 2, 256 / 2, 15, 0, 600);
		let drawCounter = 0;
		let showShip = false;

		do Output.printString("Asteroids Ship by Tommy Greim");
		do Output.println();
		do Output.printString("LEFT / RIGHT to rotate");
		do Output.println();
		do Output.printString("UP to accelerate");
		do Output.println();
		do Output.printString("Press SPACE to hide this.");

		while(~showShip){
			do Sys.wait(33);
			let currentKey = Keyboard.keyPressed();
			if(currentKey = 32){
				let showShip = true;
			}
		}

		while(true){
			let drawCounter = drawCounter + 1;
			do mainTri.calcAngSpeed(drawCounter);
			do mainTri.calcLinSpeed(drawCounter);
			do mainTri.calcCoords();
			do Screen.clearScreen();
			do Output.println();
			do Output.moveCursor(0,0);
			do mainTri.draw();
			do Sys.wait(33);

		}

		return;
   }

  //  function void drawTriangle(int ang1, int ang2, int ang3, int deltaTheta, int radius, int centerX, int centerY){
		// //Results of the sin/cos function
		// var Fraction x1TrigRes, y1TrigRes, x2TrigRes, y2TrigRes, x3TrigRes, y3TrigRes;
		// //Intermediary Fraction values
		// var Fraction x1Inter, y1Inter, x2Inter, y2Inter, x3Inter, y3Inter;
		// //Final Offsets
		// var int x1Offset, y1Offset, x2Offset, y2Offset, x3Offset, y3Offset;
		// //Final X and Y values;
		// var int x1, x2, x3, y1, y2, y3;

		// let x1TrigRes = Trig.sine(ang1);
		// do x1TrigRes.lossyReduce(30000 / radius);
		// let x1Inter = x1TrigRes.multInt(radius);
		// let x1Offset = x1Inter.floor();
		// let x1 = x1Offset + centerX;

		// let y1TrigRes = Trig.cosine(ang1);
		// do y1TrigRes.lossyReduce(30000 / radius);
		// let y1Inter = y1TrigRes.multInt(radius);
		// let y1Offset = y1Inter.floor();
		// let y1 = y1Offset + centerY;

		// let x2TrigRes = Trig.sine(ang2);
		// do x2TrigRes.lossyReduce(30000 / radius);
		// let x2Inter = x2TrigRes.multInt(radius);
		// let x2Offset = x2Inter.floor();
		// let x2 = x2Offset + centerX;

		// let y2TrigRes = Trig.cosine(ang2);
		// do y2TrigRes.lossyReduce(30000 / radius);
		// let y2Inter = y2TrigRes.multInt(radius);
		// let y2Offset = y2Inter.floor();
		// let y2 = y2Offset + centerY;

		// let x3TrigRes = Trig.sine(ang3);
		// do x3TrigRes.lossyReduce(30000 / radius);
		// let x3Inter = x3TrigRes.multInt(radius);
		// let x3Offset = x3Inter.floor();
		// let x3 = x3Offset + centerX;

		// let y3TrigRes = Trig.cosine(ang3);
		// do y3TrigRes.lossyReduce(30000 / radius);
		// let y3Inter = y3TrigRes.multInt(radius);
		// let y3Offset = y3Inter.floor();
		// let y3 = y3Offset + centerY;

		// do Output.println();
		// do Screen.clearScreen();
		// do Screen.drawLine(x1, y1, x2, y2);
		// do Screen.drawLine(x2, y2, x3, y3);
		// do Screen.drawLine(x3, y3, x1, y1);


		// do x1TrigRes.dispose();
		// do y1TrigRes.dispose();
		// do x2TrigRes.dispose();
		// do y2TrigRes.dispose();
		// do x3TrigRes.dispose();
		// do y3TrigRes.dispose();
		// do x1Inter.dispose();
		// do y1Inter.dispose();
		// do x2Inter.dispose();
		// do y2Inter.dispose();
		// do x3Inter.dispose();
		// do y3Inter.dispose();

		// return;
  //  }

  //  function int mod(int a, int b){
  //  		return a-(a/b*b);
  //  }
}
