// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //A Register, D Register, PC, ALU
    Not(in=instruction[15], out=doACom);
    Or(a=doACom, b=storeAAAA, out=changeA);
    Mux16(sel=instruction[15], a[0..14]=instruction[0..14], a[15]=false, b=aluOut, out[0..14]=aInput);

    //A Register
    ARegister(in[0..14]=aInput, load=changeA, out=theAddress, out[0..14]=addressM);

    Mux16(a=theAddress, b=inM, sel=instruction[12], out[0..14]=AorM);
    ALU(x[0..14]=inD, y[0..14]=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out[14]=jlt, out[0..7]=halfOut1, out[8..15]=halfOut2);
    DMux8Way(in=true, sel=instruction[3..5], b=storeM, c=storeD, d=storeMD, e=storeA, f=storeAM, g=storeAD, h=storeAMD);

    Or(a=storeA, b=storeAM, out=storeAA);
    Or(a=storeAA, b=storeAD, out=storeAAA);
    Or(a=storeAAA, b=storeAMD, out=storeAAAA);

    Or(a=storeM, b=storeAM, out=storeMM);
    Or(a=storeMM, b=storeMD, out=storeMMM);
    Or(a=storeMMM, b=storeAMD, out=storeMMMM);
    And(a=storeMMMM, b=instruction[15], out=writeM);

    Or(a=storeD, b=storeAD, out=storeDD);
    Or(a=storeDD, b=storeMD, out=storeDDD);
    Or(a=storeDDD, b=storeAMD, out=storeDDDD);

    //D Register
    DRegister(in=aluOut, load=storeDDDD, out[0..14]=inD);

    //Output M
    Mux16(sel=storeMMMM, a=inM, b=aluOut, out=tempM);
    Mux16(sel=instruction[15], a=inM, b=tempM, out[0..14]=outM[0..14]);
    Not(in=jge, out=outM[15]);


    Or8Way(in=halfOut1, out=notZero1);
    Or8Way(in=halfOut2, out=notZero2);
    Or(a=notZero1, b=notZero2, out=notZero, out=jne);
    Not(in=notZero, out=jeq);
    Not(in=jlt, out=jge);
    And(a=jge, b=notZero, out=jgt);
    Or(a=jlt, b=jeq, out=jle);
    Not(in=false, out=jmp);

    //Don't have a non-16bit version of Mux8Way, so I did in the janky way.
    Mux(a=false, b=jgt, sel=instruction[0], out=ab);
    Mux(a=jeq, b=jge, sel=instruction[0], out=cd);
    Mux(a=jlt, b=jne, sel=instruction[0], out=ef);
    Mux(a=jle, b=jmp, sel=instruction[0], out=gh);
    Mux(a=ab, b=cd, sel=instruction[1], out=abcd);
    Mux(a=ef, b=gh, sel=instruction[1], out=efgh);
    Mux(a=abcd, b=efgh, sel=instruction[2], out=mightJump);
    //Mux8Way16(sel=instruction[0..2], a[0]=false, b[0]=jgt, c[0]=jeq, d[0]=jge, e[0]=jlt, f[0]=jne, g[0]=jle, h[0]=jmp, out[0]=mightJump);
    And(a=mightJump, b=instruction[15], out=willJump);
    Not(in=willJump, out=wontJump);

    PC(in=theAddress, load=willJump, inc=true, reset=reset, out[0..14]=pc);

    //DMux8Way(in=true, sel=instruction[0..2], b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);
    
}